#!/usr/bin/env python3
"""
Given one or more accessions associated with reads on SRA, look them up
and download all associated fastqs.
"""

import argparse
import os
from pathlib import Path
import subprocess
import sys

import sra


def get_api_env_or_none() -> str:
    """Lookup NCBI_API_KEY environment variable.

    Lookup NCBI_API_KEY environment variable. If it exists, return it.
    Otherwise, return None.

    Returns:
        str: the value of the NCBI_API_KEY environment variable, if it
            exists. If it doesn't exist, returns None.
    """
    if "NCBI_API_KEY" in os.environ:
        return os.environ["NCBI_API_KEY"]
    return None


def parse_args():
    """parse command line arguments"""
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "accession",
        nargs="*",
        help="accession to look up and download fastqs for",
    )
    parser.add_argument(
        "-o",
        "--out-dir",
        type=Path,
        help="output directory",
        default=Path.cwd(),
    )
    parser.add_argument(
        "-l",
        "--list-file",
        type=argparse.FileType("r"),
        help="file containing list of accessions to download, one per line",
    )
    parser.add_argument(
        "-n",
        "--no-prompt",
        action="store_true",
        help="do not prompt to download; just go ahead and do it",
    )
    parser.add_argument(
        "-k",
        "--ncbi-api-key",
        help=(
            "key for NCBI API. If not specified, uses environment variable"
            " NCBI_API_KEY."
        ),
        default=get_api_env_or_none(),
    )
    return parser.parse_args()


def main():
    """main method of script"""
    args = parse_args()

    # figure out whether an NCBI API key was specified

    # read accessions list
    accessions_to_lookup = []
    if args.list_file:
        for line in args.list_file:
            accessions_to_lookup.append(line.strip())
    if args.accession:
        accessions_to_lookup += args.accession

    # make sure outpath is ok
    if not args.out_dir.is_dir():
        print(
            "Requested output directory does not exist or is not a directory",
            file=sys.stderr,
        )
        sys.exit(1)

    # first, we need to convert our list of accessions to a list of
    # runs, because some SRA accessions contain multiple runs
    accession_ids = []
    print("looking up accession ids...", file=sys.stderr)
    for accession in accessions_to_lookup:
        accession_ids.append(
            sra.get_accession_id(accession, api_key=args.ncbi_api_key)
        )

    run_accessions = []
    print("looking up accession runs...", file=sys.stderr)
    for accession_id in accession_ids:
        run_accessions += sra.get_id_run_accessions(
            accession_id, api_key=args.ncbi_api_key
        )
    print("done with NCBI lookups", file=sys.stderr)

    # next, we convert our list of run accessions to a list of ftp URLs
    print("\nDownloading the following accessions:", file=sys.stderr)
    urls = []
    for run_accession in run_accessions:
        urls.append(sra.get_fastq_url(run_accession))
        print(urls[-1])

    if not args.no_prompt:
        responded_yes = False
        while not responded_yes:
            response = input("Start download? [Y/n]: ")
            responded_yes = response in ["y", "Y", "yes", "Yes", "YES"]
            if response in ["n", "N", "no", "No", "NO"]:
                print(
                    "OK, not downloading anything. Goodbye!", file=sys.stderr
                )
                sys.exit(0)

    # finally, use curl to download all the fastqs
    print("Starting downloads...", file=sys.stderr)
    old_path = os.getcwd()
    os.chdir(args.out_dir)
    for url in urls:
        subprocess.run(["wget", url], check=True)
    os.chdir(old_path)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Interrupted!", file=sys.stderr)
        sys.exit(1)
